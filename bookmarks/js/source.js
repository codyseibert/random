// Generated by CoffeeScript 1.9.1
(function() {
  $(document).ready(function() {
    var Node, child, circles, h, head, node, nodes, randomColor, rects, recursiveAnim, render, svg, texts, update, w;
    Node = (function() {
      Node.ids = 0;

      function Node() {
        this.id = Node.ids++;
        this.x = 0;
        this.y = 0;
        this.parent = null;
        this.text = '';
        this.children = [];
      }

      Node.prototype.setParent = function(parent) {
        if (this.parent) {
          this.parent.remove(this);
        }
        this.parent = parent;
        return this;
      };

      Node.prototype.remove = function(child) {
        this.children.splice(this.children.indexOf(child, 1));
        return child;
      };

      return Node;

    })();
    randomColor = function() {
      return '#' + Math.floor(Math.random() * 16777215).toString(16);
    };
    w = $(document).width();
    h = $(document).height();
    svg = d3.select('body').append('svg').attr('width', w).attr('height', h);
    $(window).on('resize', function() {
      w = $(document).width();
      h = $(document).height();
      svg.attr('width', w);
      return svg.attr('height', h);
    });
    head = new Node();
    nodes = [head];
    child = new Node();
    child.setParent(head);
    nodes.push(child);
    head.x = w / 2;
    head.y = h / 2;
    child.x = head.x - 1;
    child.y = head.y - 1;
    circles = null;
    rects = null;
    texts = null;
    node = svg.selectAll('.node').data(nodes).enter().append('circle').classed('node', true);
    console.log(node);
    update = function() {
      var MAX, dir, i, inner, j, k, l, len, len1, mag, n1, n2, norm, outer, results, sum;
      MAX = 100;
      results = [];
      for (i = k = 0, len = nodes.length; k < len; i = ++k) {
        n1 = nodes[i];
        sum = V(0, 0);
        inner = V(n1.x, n1.y);
        for (j = l = 0, len1 = nodes.length; l < len1; j = ++l) {
          n2 = nodes[j];
          if (n1 === n2) {
            continue;
          }
          outer = V(n2.x, n2.y);
          sum = sum.add(inner.sub(outer));
        }
        if (sum.x !== 0 || sum.y !== 0) {
          mag = sum.mag();
          norm = 1.0 - Math.min(mag, MAX) / MAX;
          dir = sum.unit();
          inner = inner.add(dir.mult(norm * 5));
          n1.x = inner.x;
          results.push(n1.y = inner.y);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
    render = function() {
      return node.attr('cx', function(d) {
        return d.x;
      }).attr('cy', function(d) {
        return d.y;
      }).attr('r', 40);
    };
    setInterval(function() {
      return update();
    }, 1);
    window.requestAnimationFrame = (function() {
      return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
        return setTimeout(render, 1000 / 60);
      };
    })();
    return (recursiveAnim = function() {
      render();
      return requestAnimationFrame(recursiveAnim);
    })();
  });

}).call(this);
