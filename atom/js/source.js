// Generated by CoffeeScript 1.9.1
(function() {
  $(document).ready(function() {
    var $cody, $nav, CENTER_X, CENTER_Y, HEIGHT, WIDTH;
    WIDTH = $(document).width();
    HEIGHT = $(document).height();
    CENTER_X = WIDTH / 2;
    CENTER_Y = HEIGHT / 2;
    $nav = $('.nav');
    $cody = $('.cody');
    $nav.css('left', CENTER_X - $cody.width() / 2);
    $nav.css('top', CENTER_Y - $cody.height() / 2);
    return $nav.css('opacity', 1);
  });

  $(document).ready(function() {
    var MAX_DIST, MAX_FONT, MIN_FONT;
    MAX_DIST = 50;
    MAX_FONT = 70;
    MIN_FONT = 40;
    $('.link').each(function() {
      return $(this).addClass($(this).data('color'));
    });
    $('.link').on('mouseover', function() {
      return $(this).addClass('over');
    });
    $('.link').on('mouseout', function() {
      return $(this).removeClass('over');
    });
    return $('.link').on('click', function() {
      $('.link').removeClass('active');
      $(this).addClass('active');
      $('.panel').removeClass('red green orange blue');
      return $('.panel').addClass($(this).data('color'));
    });
  });

  $(document).ready(function() {
    var CENTER_X, CENTER_Y, HEIGHT, Orbit, Particle, WIDTH, makeSVG, nucleus, orbits, randomColor;
    WIDTH = $('.atom').width();
    HEIGHT = $('.atom').height();
    CENTER_X = WIDTH / 2;
    CENTER_Y = HEIGHT / 2;
    makeSVG = function(tag, attrs) {
      var el, k, v;
      el = document.createElementNS('http://www.w3.org/2000/svg', tag);
      for (k in attrs) {
        v = attrs[k];
        el.setAttribute(k, v);
      }
      return el;
    };
    randomColor = function() {
      return '#' + Math.floor(Math.random() * 16777215).toString(16);
    };
    Particle = (function() {
      function Particle(radius, size) {
        this.size = size;
        this.theta = Math.random() * Math.PI;
        this.phi = Math.random() * Math.PI * 2;
        this.radius = radius;
        this.thetaStep = Math.random() * 0.02 + 0.02;
        this.phiStep = Math.random() * 0.005 + 0.005;
        this.svg = makeSVG('circle', {
          cx: this.getX(),
          cy: this.getY(),
          r: this.getR(),
          fill: randomColor()
        });
      }

      Particle.prototype.getX = function() {
        return CENTER_X + this.radius * Math.sin(this.theta) * Math.cos(this.phi);
      };

      Particle.prototype.getY = function() {
        return CENTER_Y + this.radius * Math.sin(this.theta) * Math.sin(this.phi);
      };

      Particle.prototype.getR = function() {
        return Math.max(2, Math.cos(this.theta) * this.size + this.size + 1);
      };

      return Particle;

    })();
    Orbit = (function() {
      function Orbit(numParticles, radius, particleSize) {
        var i, j, particle, ref;
        this.particles = [];
        this.radius = radius;
        for (i = j = 0, ref = numParticles; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          particle = new Particle(this.radius, particleSize);
          $('.atom').append(particle.svg);
          this.particles.push(particle);
        }
      }

      Orbit.prototype.render = function() {
        var j, len, particle, ref, results, svg;
        ref = this.particles;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          particle = ref[j];
          svg = particle.svg;
          particle.radius = this.radius;
          svg.setAttribute('cx', particle.getX());
          svg.setAttribute('cy', particle.getY());
          results.push(svg.setAttribute('r', particle.getR()));
        }
        return results;
      };

      Orbit.prototype.update = function() {
        var j, len, particle, ref, results;
        ref = this.particles;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          particle = ref[j];
          particle.theta += particle.thetaStep;
          results.push(particle.phi += particle.phiStep);
        }
        return results;
      };

      return Orbit;

    })();
    orbits = [];
    nucleus = makeSVG('circle', {
      cx: CENTER_X,
      cy: CENTER_Y,
      r: 17,
      fill: 'white',
      "class": 'nucleus'
    });
    orbits.push(new Orbit(2, 50, 3));
    orbits.push(new Orbit(4, 80, 3));
    orbits.push(new Orbit(8, 120, 3));
    orbits.push(new Orbit(8, 150, 3));
    setInterval(function() {
      var j, len, orbit, results;
      results = [];
      for (j = 0, len = orbits.length; j < len; j++) {
        orbit = orbits[j];
        results.push(orbit.update());
      }
      return results;
    }, 10);
    $('.atom').append(nucleus);
    return setInterval(function() {
      var j, l, len, len1, nucleusPlaced, orbit, particle, particles, results;
      for (j = 0, len = orbits.length; j < len; j++) {
        orbit = orbits[j];
        orbit.render();
      }
      nucleus.remove();
      particles = $('circle');
      particles.sort(function(a, b) {
        return parseFloat(a.getAttribute('r')) - parseFloat(b.getAttribute('r'));
      });
      nucleusPlaced = false;
      $('.atom').empty();
      results = [];
      for (l = 0, len1 = particles.length; l < len1; l++) {
        particle = particles[l];
        $('.atom').append(particle);
        if (!nucleusPlaced && parseFloat(particle.getAttribute('r')) > 6) {
          $('.atom').append(nucleus);
          nucleusPlaced = true;
        }
        continue;
      }
      return results;
    }, 10);
  });

}).call(this);
