// Generated by CoffeeScript 1.9.1
(function() {
  $(document).ready(function() {
    var CENTER_X, CENTER_Y, Circle, HEIGHT, Ring, WIDTH, makeSVG, randomColor, rings;
    WIDTH = $(document).width();
    HEIGHT = $(document).height();
    CENTER_X = WIDTH / 2;
    CENTER_Y = HEIGHT / 2;
    $('svg').attr('width', WIDTH);
    $('svg').attr('height', HEIGHT);
    makeSVG = function(tag, attrs) {
      var el, k, v;
      el = document.createElementNS('http://www.w3.org/2000/svg', tag);
      for (k in attrs) {
        v = attrs[k];
        el.setAttribute(k, v);
      }
      return el;
    };
    randomColor = function() {
      return '#' + Math.floor(Math.random() * 16777215).toString(16);
    };
    Circle = (function() {
      var RADIUS;

      RADIUS = 5;

      function Circle(theta, radius) {
        this.theta = theta;
        this.radius = radius;
        this.svg = makeSVG('circle', {
          cx: this.getX(),
          cy: this.getY(),
          r: this.getR(),
          stroke: 'black',
          'stroke-width': 3,
          fill: randomColor()
        });
      }

      Circle.prototype.getX = function() {
        return CENTER_X + this.radius * Math.cos(this.theta);
      };

      Circle.prototype.getY = function() {
        return CENTER_Y + this.radius * Math.sin(this.theta);
      };

      Circle.prototype.getR = function() {
        var scale;
        scale = this.radius / 1000;
        return RADIUS * RADIUS * scale;
      };

      return Circle;

    })();
    Ring = (function() {
      var NUM_CIRCLES, RADIUS, SPEED, STEP;

      NUM_CIRCLES = 100;

      SPEED = 10;

      RADIUS = 1000;

      STEP = Math.PI * 2 / NUM_CIRCLES;

      function Ring() {
        var circle, i, j, ref, theta;
        this.circles = [];
        this.radius = RADIUS;
        theta = 0;
        for (i = j = 0, ref = NUM_CIRCLES; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          theta += STEP;
          circle = new Circle(theta, RADIUS);
          $('svg').append(circle.svg);
          this.circles.push(circle);
        }
      }

      Ring.prototype.render = function() {
        var circle, j, len, ref, results, svg;
        ref = this.circles;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          circle = ref[j];
          svg = circle.svg;
          circle.radius = this.radius;
          svg.setAttribute('cx', circle.getX());
          svg.setAttribute('cy', circle.getY());
          results.push(svg.setAttribute('r', circle.getR()));
        }
        return results;
      };

      Ring.prototype.update = function() {
        var circle, j, len, ref, results;
        this.radius -= SPEED;
        if (this.radius <= 0) {
          ref = this.circles;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            circle = ref[j];
            results.push(circle.svg.remove());
          }
          return results;
        }
      };

      return Ring;

    })();
    rings = [];
    setInterval(function() {
      return rings.push(new Ring());
    }, 100);
    setInterval(function() {
      var dead, index, j, l, len, len1, results, ring;
      dead = [];
      for (index = j = 0, len = rings.length; j < len; index = ++j) {
        ring = rings[index];
        ring.update();
        if (ring.radius <= 0) {
          dead.push(index);
        }
      }
      results = [];
      for (l = 0, len1 = dead.length; l < len1; l++) {
        index = dead[l];
        results.push(rings.splice(index, 1));
      }
      return results;
    }, 10);
    setInterval(function() {
      var j, len, results, ring;
      results = [];
      for (j = 0, len = rings.length; j < len; j++) {
        ring = rings[j];
        results.push(ring.render());
      }
      return results;
    }, 10);
    return setInterval(function() {
      return console.log(rings.length);
    }, 5000);
  });

}).call(this);
